# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11WAtNOEWYUwGs-78JuDjvS3bsm9luJpo
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression

# Load models and scaler (initialize them as in your script)
def load_models():
    # Initialize models and scaler as per your existing code
    scaler = StandardScaler()
    knn_model = KNeighborsClassifier(n_neighbors=5)
    logistic_model = LogisticRegression(max_iter=1000, multi_class='multinomial', solver='lbfgs')

    # Train models with sample data (replace this with actual model loading or pre-training)
    # Simulated data to replicate fitting
    X_sample = np.array([[0, 100, 200], [1, 150, 300], [2, 50, 100]])
    y_sample_institute = np.array([0, 1, 2])
    y_sample_program = np.array([1, 2, 0])
    y_sample_round = np.array([2, 0, 1])

    scaler.fit(X_sample)
    knn_model.fit(X_sample, y_sample_institute)
    logistic_model.fit(X_sample, y_sample_institute)

    return scaler, knn_model, logistic_model

# Load models
scaler, knn_model, logistic_model = load_models()

# Streamlit UI
st.title("ML Model Deployment App")
st.write("This app predicts Institute, Program, or Round based on your input data.")

# User inputs
seat_type = st.selectbox("Seat Type", [0, 1, 2], format_func=lambda x: f"Seat Type {x}")  # Replace with actual labels
opening_rank = st.number_input("Opening Rank", min_value=0, step=1)
closing_rank = st.number_input("Closing Rank", min_value=0, step=1)

# Model selection
model_choice = st.radio("Choose a model for prediction:", ("K-Nearest Neighbors", "Logistic Regression"))

# Predict button
if st.button("Predict"):
    # Prepare input for prediction
    input_data = np.array([[seat_type, opening_rank, closing_rank]])
    scaled_input = scaler.transform(input_data)

    # Predictions based on selected model
    if model_choice == "K-Nearest Neighbors":
        institute_prediction = knn_model.predict(scaled_input)
    else:  # Logistic Regression
        institute_prediction = logistic_model.predict(scaled_input)

    # Display predictions
    st.subheader("Predictions:")
    st.write(f"Predicted Institute: {institute_prediction[0]}")
    st.write("Note: Program and Round predictions can be added similarly if needed.")